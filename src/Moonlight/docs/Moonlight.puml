@startuml Moonlight


namespace LunarDB.Moonlight.API {

class ParsedQuery {

    + type() const : Common::QueryData::Primitives::EQueryType
    + get<Data>() : Data&
    + get<Data>() const : const Data&
    + make<Data>() : ParsedQuery

    - m_type : Common::QueryData::Primitives::EQueryType
    - m_data : QueryDataType
}
note left
using QueryDataType = std::variant<
    Common::QueryData::Create,
    Common::QueryData::Drop,
    Common::QueryData::Migrate,
    Common::QueryData::Truncate,
    Common::QueryData::Rename,
    Common::QueryData::Select,
    Common::QueryData::Insert,
    Common::QueryData::Update,
    Common::QueryData::Delete,
    Common::QueryData::Grant,
    Common::QueryData::Revoke,
    Common::QueryData::Commit,
    Common::QueryData::Rollback,
    Common::QueryData::SavePoint,
    Common::QueryData::Database,
    Common::QueryData::Rebind,
    Common::QueryData::Schema
>;
end note

stereotype QueryParser {
    + parseQuery(query : std::string_view) : ParsedQuery
}

stereotype Input {
    query : string
}

Input -> QueryParser : used
QueryParser --> ParsedQuery : returns

}

@enduml