@startuml Architecture
'!theme crt-amber

left to right direction

namespace LunarDB {

stereotype Input {
    + query : string
}

namespace Moonlight <<Query Parser>> {

namespace API {

class ParsedQuery {
    + type() : EQueryType
    + get<QueryData>() : QueryData

    - type : EQueryType
    - data : variant<QueryDataTypes>
}
note right
    QueryDataTypes / QueryTypes: [ 
        Create, Drop, Migrate, Truncate,
        Rename, Select, Insert, Update,
        Delete, Grant, Revoke, Database
        Commit, Rollback, SavePoint,
        Rebind, Schema 
    ]
end note

stereotype QueryParser {
    + parseQuery(query : std::string_view) : ParsedQuery
}

}

}

namespace Astral <<Query Executor>> {

namespace API {

stereotype QueryExecutor {
    + executeQuery(query : ParsedQuery) : void
}

}

}

namespace Celestial <<Users Manager>> {

namespace API {

}

}

namespace Crescentum <<Logger>> {

namespace API {

}

}

namespace BrightMoon <<Write Ahead Logger>> {

namespace API {

}

}

namespace Selenity <<Data Manager>> {

namespace API {

}

}

namespace API <<Server?>> {
    
stereotype Server {
    + run() : void
}

}

LunarDB.API.Server --> Selenity.API : [0.1] Database Configs
LunarDB.API.Server --> BrightMoon.API : [0.2] Crash Recovery

Input --> LunarDB.API.Server : [1] send to
LunarDB.API.Server -> Moonlight.API.QueryParser : [2] Parse Query
LunarDB.API.Server --> Celestial.API : [3] Users
Celestial.API -> Selenity.API : [4] Users Data
LunarDB.API.Server -> Astral.API.QueryExecutor : [5] Execute Query
Astral.API.QueryExecutor --> Selenity.API : [6.1] Modify Data
Astral.API.QueryExecutor --> BrightMoon.API : [6.2] Write Ahead Log

Moonlight.API.ParsedQuery *- Moonlight.API.QueryParser : use
Astral.API.QueryExecutor -* Moonlight.API.ParsedQuery : use

stereotype Global {}
Global --> Crescentum.API : [general] use

}

@enduml